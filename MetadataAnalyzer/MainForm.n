using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Xml;
using System.Xml.Linq;
using System.Text;
using System.Windows.Forms;

namespace MetadataAnalyzer
{
  /// <summary>
  /// Description of MainForm.
  /// </summary>
  public partial class MainForm : Form
  {
    _settings : Settings;
    mutable _path : string = @"D:\!\Jur\BH\BH-2013-";
  
    public this()
    {
      InitializeComponent();
      _settings           = Settings.Default;
      _path               = _settings.Path;
      _pathTextBox.Text   = _path;
      _pathTextBox.KeyUp += OnKeyPress;
    }
  
    private MainForm_Load (_sender : object,  _e : EventArgs) : void
    {
    }

    private DoWork() : void
    {
      def gerRusInfo(author : XElement, lang : string) : XElement
      {
        author.Elements("individInfo").FirstOrDefault(x => x.Attribute("lang")?.Value == lang)
      }
      _grid.Rows.Clear();
      def doc = XDocument.Load(@"..\..\..\ConsoleApplication34\bin\Debug\issue.xml");
      def authors  = doc.Root.Descendants("article").Elements("authors").Elements("author").NToArray();
      def articles = doc.Root.Descendants("article").NToArray();

      def addAuthorError(lang : string, tag : string, rusInfo : string, enuInfo : string) : void
      {
        def text =
          if (lang == "RUS") 
            rusInfo
          else 
            enuInfo;
          def authorWoAuwork = authors.Where(a => gerRusInfo(a, lang)?.Element(tag) == null);
          foreach (author in authorWoAuwork)
          {
            if (author.Parent.Elements("author").All(a => gerRusInfo(a, lang)?.Element(tag) == null))
              _ = _grid.Rows.Add(text, GerUrlFromAuthor(author), gerRusInfo(author, lang));
            else
            {
              ();
            }
          }
      }
      def addAuthorWoAuwork(lang : string) : void
      {
        addAuthorError(lang, "orgName", <#Автор без Места работы:#>,
                                        <#Автор без Place of employment:#>)
      }
      def addAuthorWoEmail(lang : string) : void
      {
        addAuthorError(lang, "email", <#Отсутствует "E-mail" в русских метаданных#>,
                                      <#Отсутствует "E-mail" в английских метаданных"#>)
      }
      
      addAuthorWoAuwork("RUS");
      addAuthorWoAuwork("ENG");

      addAuthorWoEmail("RUS");
      addAuthorWoEmail("ENG");
      
      foreach (article when article.Element("nobiblist") != null in articles)
        _ = _grid.Rows.Add("Нет списка литературы", GerUrlFromArticle(article), article);
      
      _grid.Sort(Url, ComponentModel.ListSortDirection.Ascending);
      
      FillAuthorInfos(authors);
    }

    GerUrlFromArticle(article : XElement) : string
    {
      def pdfUrlTDoc(fileName : string) : string
      {
        def result = Path.ChangeExtension(fileName, ".doc");
        when (File.Exists(Path.Combine(_path, @"CD\DOC", result)))
          return result;
        
        mutable result2 = Path.ChangeExtension(fileName, ".docx");
        def fullPath = Path.Combine(_path, @"CD\DOC", result2);
        if (File.Exists(fullPath))
          result2 = fullPath;
        else 
          result2 = result;
        result2
      }
      pdfUrlTDoc(article.Element("files")?.Element("file")?.Value)
    }
    
    GerUrlFromAuthor(author : XElement) : string
    {
      GerUrlFromArticle(author.Parent.Parent)
    }
    
    FillAuthorInfos(authors : array[XElement]) : void
    {
      def html = XElement("table", XAttribute("border", 1), XAttribute("style", "border-collapse: collapse;"), XAttribute("cellspacing", 2), XAttribute("cellpadding", 5));

      def template = <#
    <html>
      <head>
        <title>Список информации публикациям</title>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge"> 
        <meta name="application-name" content="RSDN">
        <meta name="msapplication-tooltip" content="Russian Software Developer Network">
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <link rel="stylesheet"  type="text/css" href="http://rsdn.org/css/article.css" />
      </head>
      <body>
        {content}
      </body>
    </html>
      #>;

      def header = XElement("tr");
      header.Add(XElement("th", "surname"));
      header.Add(XElement("th", "initials"));
      header.Add(XElement("th", "orgName"));
      header.Add(XElement("th", "email"));
      header.Add(XElement("th", "otherInfo"));
      
      foreach (author in authors with i)
      {
        def tr = XElement("tr");
        
        def bkColor = if (i % 2 == 0) null else XAttribute("style", "background-color: White;");
        
        def article = author.Parent.Parent;
        def inf = author.Elements("individInfo").FirstOrDefault(inf => inf.Attribute("lang")?.Value == "RUS");
        if (inf == null)
        {
          def lineInfo = author : IXmlLineInfo;
          tr.Add(XElement("td", lineInfo.LineNumber + "," + lineInfo.LinePosition  + ": Нет информации об авторе нра русском языке."));
        }
        else
        {
          tr.Add(XElement("td", inf.Element("surname")  ?.Value : object ?? XElement("b", "<<Не задан!>>"), bkColor));
          tr.Add(XElement("td", inf.Element("initials") ?.Value : object ?? XElement("b", "<<Не задан!>>"), bkColor));
          tr.Add(XElement("td", inf.Element("orgName")  ?.Value : object ?? XElement("b", "<<Не задан!>>"), bkColor));
          tr.Add(XElement("td", inf.Element("email")    ?.Value : object ?? XElement("b", "<<Не задан!>>"), bkColor));
          tr.Add(XElement("td", inf.Element("otherInfo")?.Value : object ?? XElement("b", "<<Не задан!>>"), bkColor));
        }
        def title = article.Element("artTitles").Elements("artTitle").FirstOrDefault(inf => inf.Attribute("lang")?.Value == "RUS")?.Value;
        tr.Add(XElement("td", title, bkColor));
        def pdf = article.Element("files")?.Element("file")?.Value;
        tr.Add(XElement("td", pdf, bkColor));
        def biblistLen = article.Element("references")?.Elements("reference")?.Count();
        tr.Add(XElement("td", if (biblistLen > 0) biblistLen : object else XElement("b", 0), bkColor));
        
        html.Add(tr);
      }
      
      def text = template.Replace("{content}", html.ToString());
      _webBrowser.DocumentText = text;
    }
    
    private _grid_RowEnter(_sender : object,  e : DataGridViewCellEventArgs) : void
    {
      def row = _grid.Rows[e.RowIndex];
      _textBox.Text = row.Cells[XmlColumn.Index].Value?.ToString() ?? "";
    }
  
    private _grid_CellContentClick (_sender : object,  e : System.Windows.Forms.DataGridViewCellEventArgs) : void
    {
      when (e.ColumnIndex == Url.Index && e.RowIndex >= 0)
      {
        mutable fullPath = "???";
        try
        {
          def row = _grid.Rows[e.RowIndex];
          def cell = row.Cells[Url.Index];
          def url = cell.Value?.ToString() ?? "";
          fullPath = Path.Combine(_path, @"CD\DOC", url);
          _ = Diagnostics.Process.Start(fullPath);
        }
        catch { e => ShowError(e.Message + "\r\n File path: '" + fullPath + "'"); }
      }
    }
    
    private ShowError(msg : string) : void
    {
      _ = MessageBox.Show(this, msg, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error)
    }
    
    private OnKeyPress(_sender : object, e : KeyEventArgs) : void
    {
      when (e.KeyCode == Keys.Return)
      {
        _path = _pathTextBox.Text;
        try DoWork();
        catch { e => ShowError(e.Message) }
      }
    }  
  
    private mutable _tabControl : System.Windows.Forms.TabControl;
  
    private mutable _errorsTabPage : System.Windows.Forms.TabPage;
  
  
    private mutable _authorInfoTabPage : System.Windows.Forms.TabPage;
  
    private mutable _webBrowser : System.Windows.Forms.WebBrowser;
  
    private MainForm_FormClosing (_sender : object,  _e : System.Windows.Forms.FormClosingEventArgs) : void
    {
      _settings.Path = _path;
      _settings.Save();
    }
  }
}
